{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "aa1707e0-0c71-4476-b8b9-82c69afd73ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler, PolynomialFeatures\n",
    "from sklearn.feature_selection import SelectKBest, chi2\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96bb374c-3e70-4e15-8e57-fc89f0ed44c6",
   "metadata": {},
   "source": [
    "# Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "dbabba48-fde2-4f3c-a26f-a2cf61201470",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('AmesHousing.txt ',\n",
    "                   sep='\\t',\n",
    "                   keep_default_na=False,\n",
    "                   na_values=[''])\n",
    "raw_data = data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "fd18ac14-d72b-4198-b8ac-0ef47b01338b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Order</th>\n",
       "      <th>PID</th>\n",
       "      <th>MS SubClass</th>\n",
       "      <th>MS Zoning</th>\n",
       "      <th>Lot Frontage</th>\n",
       "      <th>Lot Area</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>Lot Shape</th>\n",
       "      <th>Land Contour</th>\n",
       "      <th>...</th>\n",
       "      <th>Pool Area</th>\n",
       "      <th>Pool QC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>Misc Feature</th>\n",
       "      <th>Misc Val</th>\n",
       "      <th>Mo Sold</th>\n",
       "      <th>Yr Sold</th>\n",
       "      <th>Sale Type</th>\n",
       "      <th>Sale Condition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>526301100</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>141.0</td>\n",
       "      <td>31770</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NA</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>215000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>526350040</td>\n",
       "      <td>20</td>\n",
       "      <td>RH</td>\n",
       "      <td>80.0</td>\n",
       "      <td>11622</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NA</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NA</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NA</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>105000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>526351010</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14267</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NA</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>Gar2</td>\n",
       "      <td>12500</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>172000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>526353030</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>93.0</td>\n",
       "      <td>11160</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NA</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>NA</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>244000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>527105010</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13830</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NA</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NA</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NA</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>189900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 82 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Order        PID  MS SubClass MS Zoning  Lot Frontage  Lot Area Street  \\\n",
       "0      1  526301100           20        RL         141.0     31770   Pave   \n",
       "1      2  526350040           20        RH          80.0     11622   Pave   \n",
       "2      3  526351010           20        RL          81.0     14267   Pave   \n",
       "3      4  526353030           20        RL          93.0     11160   Pave   \n",
       "4      5  527105010           60        RL          74.0     13830   Pave   \n",
       "\n",
       "  Alley Lot Shape Land Contour  ... Pool Area Pool QC  Fence Misc Feature  \\\n",
       "0    NA       IR1          Lvl  ...         0      NA     NA           NA   \n",
       "1    NA       Reg          Lvl  ...         0      NA  MnPrv           NA   \n",
       "2    NA       IR1          Lvl  ...         0      NA     NA         Gar2   \n",
       "3    NA       Reg          Lvl  ...         0      NA     NA           NA   \n",
       "4    NA       IR1          Lvl  ...         0      NA  MnPrv           NA   \n",
       "\n",
       "  Misc Val Mo Sold Yr Sold Sale Type  Sale Condition  SalePrice  \n",
       "0        0       5    2010       WD           Normal     215000  \n",
       "1        0       6    2010       WD           Normal     105000  \n",
       "2    12500       6    2010       WD           Normal     172000  \n",
       "3        0       4    2010       WD           Normal     244000  \n",
       "4        0       3    2010       WD           Normal     189900  \n",
       "\n",
       "[5 rows x 82 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2783512-371a-4183-a53a-d71ece2c607d",
   "metadata": {},
   "source": [
    "# Feature engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "612b66cc-60c8-4fd4-97fd-2a1e4de28214",
   "metadata": {},
   "source": [
    "## drop columns whose shape equals to data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a645c98f-8210-4bcb-bdf4-3f1bb6cce0c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Order\n",
      "PID\n"
     ]
    }
   ],
   "source": [
    "drop_cols = []\n",
    "for col in data.columns:\n",
    "    if data[col].unique().shape[0] == data.shape[0]:\n",
    "        print(col)\n",
    "        drop_cols.append(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "a5e397dc-4f24-4a31-9e9d-b2aaaa0b12f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2930, 80)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.drop(drop_cols, axis=1, inplace=True)\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40162085-011b-4a1e-af8a-67086959d437",
   "metadata": {},
   "source": [
    "## missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "60c325c6-3123-4f04-9c3f-fe063833095b",
   "metadata": {},
   "outputs": [],
   "source": [
    "miss_cols = data.isnull().sum()[data.isnull().sum() > 0].index\n",
    "\n",
    "for col in data[miss_cols].select_dtypes(object).columns:\n",
    "    data[col] = data[col].fillna('NULL')\n",
    "\n",
    "for col in data[miss_cols].select_dtypes(np.number).columns:\n",
    "    data[col] = data[col].fillna(data[col].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "f1bed64f-6c3a-479a-adb9-c11dcbe5a16f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: int64)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()[data.isnull().sum() > 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb118cc6-2607-4b7d-8049-f47c983fa9a4",
   "metadata": {},
   "source": [
    "## label encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "003c3a72-be96-457c-b217-8b894201df42",
   "metadata": {},
   "outputs": [],
   "source": [
    "obj_cols = data.select_dtypes(object).columns\n",
    "encoder = LabelEncoder()\n",
    "for col in obj_cols:\n",
    "    data[col] = encoder.fit_transform(data[col])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "950deeee-989b-43f4-a820-a85db8f74629",
   "metadata": {},
   "source": [
    "## normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "7908dcd0-3b42-4511-805e-b77fd2474390",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data.drop('SalePrice', axis=1)\n",
    "y = data.SalePrice"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88286a38-adfd-43d5-88bb-e84820d79edd",
   "metadata": {},
   "source": [
    "## feature selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "4fedf9ec-ba27-4ea5-aa2f-f5466193a934",
   "metadata": {},
   "outputs": [],
   "source": [
    "selector_1 = SelectKBest(chi2, k=10)\n",
    "selector_1.fit(X, y)\n",
    "feature_1 = selector_1.get_feature_names_out()\n",
    "feature_2 = X.columns\n",
    "poly = PolynomialFeatures(include_bias=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34e9a6c2-aa04-437e-98e4-4911fe1d64e8",
   "metadata": {},
   "source": [
    "# Candidate models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "a82b3737-7303-4db8-8564-effcc5c81261",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_tv, X_test, y_tv, y_test = train_test_split(X,\n",
    "                                              y,\n",
    "                                              test_size=0.2,\n",
    "                                              random_state=2022)\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_tv,\n",
    "                                                  y_tv,\n",
    "                                                  test_size=0.25,\n",
    "                                                  random_state=2022)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "566f3e9d-2109-417e-8786-f1f727ac10fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M1 = LinearRegression()\n",
    "M1.fit(X_train[feature_1], y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "dcb29d6c-162c-4437-89bf-b66fc53ada20",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M2 = LinearRegression()\n",
    "M2.fit(X_train[feature_2], y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "2816e2db-6493-4b84-8461-91ea897ea053",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M3 = LinearRegression()\n",
    "X3 = poly.fit_transform(X_train)\n",
    "M3.fit(X3, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46b8bcf6-ea3c-497c-9afd-2c32d0ee496a",
   "metadata": {},
   "source": [
    "# Model estimation and selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "82b1e126-7408-4e69-991d-6fdbfb396084",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_mse = []\n",
    "train_mse.append(mean_squared_error(y_train, M1.predict(X_train[feature_1])))\n",
    "train_mse.append(mean_squared_error(y_train, M2.predict(X_train[feature_2])))\n",
    "train_mse.append(mean_squared_error(y_train, M3.predict(X3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "6a684fda-d64c-4a42-b81b-c092bb831625",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>train mse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>M1</th>\n",
       "      <td>2.085967e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>M2</th>\n",
       "      <td>8.052128e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>M3</th>\n",
       "      <td>1.150884e-06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       train mse\n",
       "M1  2.085967e+09\n",
       "M2  8.052128e+08\n",
       "M3  1.150884e-06"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(train_mse, columns=['train mse'], index=['M1', 'M2', 'M3'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "a0e84c28-a0d7-4f1c-9a97-7bbf4507bfc1",
   "metadata": {},
   "outputs": [],
   "source": [
    "val_mse = []\n",
    "val_mse.append(mean_squared_error(y_val, M1.predict(X_val[feature_1])))\n",
    "val_mse.append(mean_squared_error(y_val, M2.predict(X_val[feature_2])))\n",
    "X_val3 = poly.transform(X_val)\n",
    "val_mse.append(mean_squared_error(y_val, M3.predict(X_val3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "35a0ae6b-d82b-49ee-a269-b9642ddc89e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>validation mse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>M1</th>\n",
       "      <td>2.285775e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>M2</th>\n",
       "      <td>1.023470e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>M3</th>\n",
       "      <td>1.380228e+13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    validation mse\n",
       "M1    2.285775e+09\n",
       "M2    1.023470e+09\n",
       "M3    1.380228e+13"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(val_mse, columns=['validation mse'], index=['M1', 'M2', 'M3'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc0c516a-8df0-4141-acfe-09dc6146c762",
   "metadata": {},
   "source": [
    "# Model evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "ca03ae78-4af4-473f-9cd7-f38d2cd6d907",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_mse = []\n",
    "test_mse.append(mean_squared_error(y_test, M2.predict(X_test[feature_2])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "56fc672f-676d-462c-919e-650578d849fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_bm1 = np.mean(y_tv)\n",
    "test_mse.append(mean_squared_error(y_test, np.ones_like(y_test)*y_bm1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "7c7e0c74-2b31-4f26-a1b4-4e8a345aa3b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_tv = raw_data.loc[X_tv.index]\n",
    "y_bm2 = data_tv[['Neighborhood', 'SalePrice']].groupby('Neighborhood').mean()\n",
    "data_test = raw_data.loc[X_test.index]\n",
    "y_pred_bm2 = []\n",
    "for n in data_test.Neighborhood:\n",
    "    y_pred_bm2.append(y_bm2.loc[n][0])\n",
    "test_mse.append(mean_squared_error(y_test, y_pred_bm2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "a163bf7d-355a-4a36-b538-3072f74a4164",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>test mse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>M2</th>\n",
       "      <td>1.050911e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BM1</th>\n",
       "      <td>6.883716e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BM2</th>\n",
       "      <td>3.008222e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         test mse\n",
       "M2   1.050911e+09\n",
       "BM1  6.883716e+09\n",
       "BM2  3.008222e+09"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(test_mse, columns=['test mse'], index=['M2', 'BM1', 'BM2'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
